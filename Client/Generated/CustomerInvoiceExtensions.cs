// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class CustomerInvoiceExtensions
    {
            /// <summary>
            /// Get a range of Invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<CustomerInvoiceDto> GetAllInvoices(this ICustomerInvoice operations, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ICustomerInvoice)s).GetAllInvoicesAsync(greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of Invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CustomerInvoiceDto>> GetAllInvoicesAsync( this ICustomerInvoice operations, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllInvoicesWithHttpMessagesAsync(greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoice'>
            /// Defines the data for the Invoice to create
            /// </param>
            public static void CreateInvoice(this ICustomerInvoice operations, CustomerInvoiceUpdateDto invoice)
            {
                Task.Factory.StartNew(s => ((ICustomerInvoice)s).CreateInvoiceAsync(invoice), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoice'>
            /// Defines the data for the Invoice to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateInvoiceAsync( this ICustomerInvoice operations, CustomerInvoiceUpdateDto invoice, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateInvoiceWithHttpMessagesAsync(invoice, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the Invoice
            /// </param>
            public static CustomerInvoiceDto Get(this ICustomerInvoice operations, string invoiceNumber)
            {
                return Task.Factory.StartNew(s => ((ICustomerInvoice)s).GetAsync(invoiceNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the Invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomerInvoiceDto> GetAsync( this ICustomerInvoice operations, string invoiceNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(invoiceNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the Invoice to update
            /// </param>
            /// <param name='invoice'>
            /// Defines the data for the Invoice to update
            /// </param>
            public static void Put(this ICustomerInvoice operations, string invoiceNumber, CustomerInvoiceUpdateDto invoice)
            {
                Task.Factory.StartNew(s => ((ICustomerInvoice)s).PutAsync(invoiceNumber, invoice), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the Invoice to update
            /// </param>
            /// <param name='invoice'>
            /// Defines the data for the Invoice to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this ICustomerInvoice operations, string invoiceNumber, CustomerInvoiceUpdateDto invoice, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(invoiceNumber, invoice, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Release invoice operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the invoice to be released
            /// </param>
            /// <param name='releaseActionDto'>
            /// The action the dto use to condition the action
            /// </param>
            public static ReleaseInvoiceActionResultDto ReleaseInvoice(this ICustomerInvoice operations, string invoiceNumber, object releaseActionDto)
            {
                return Task.Factory.StartNew(s => ((ICustomerInvoice)s).ReleaseInvoiceAsync(invoiceNumber, releaseActionDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Release invoice operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the invoice to be released
            /// </param>
            /// <param name='releaseActionDto'>
            /// The action the dto use to condition the action
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseInvoiceActionResultDto> ReleaseInvoiceAsync( this ICustomerInvoice operations, string invoiceNumber, object releaseActionDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReleaseInvoiceWithHttpMessagesAsync(invoiceNumber, releaseActionDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reverse an Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the released invoice to be reversed
            /// </param>
            /// <param name='reverseActionDto'>
            /// The action the dto use to condition the action
            /// </param>
            public static ReverseInvoiceActionResultDto ReverseInvoice(this ICustomerInvoice operations, string invoiceNumber, ReverseInvoiceActionDto reverseActionDto)
            {
                return Task.Factory.StartNew(s => ((ICustomerInvoice)s).ReverseInvoiceAsync(invoiceNumber, reverseActionDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reverse an Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the released invoice to be reversed
            /// </param>
            /// <param name='reverseActionDto'>
            /// The action the dto use to condition the action
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReverseInvoiceActionResultDto> ReverseInvoiceAsync( this ICustomerInvoice operations, string invoiceNumber, ReverseInvoiceActionDto reverseActionDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReverseInvoiceWithHttpMessagesAsync(invoiceNumber, reverseActionDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an attachment and associates it with an invoice. If the file
            /// already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the invoice
            /// </param>
            public static void CreateHeaderAttachment(this ICustomerInvoice operations, string invoiceNumber)
            {
                Task.Factory.StartNew(s => ((ICustomerInvoice)s).CreateHeaderAttachmentAsync(invoiceNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an attachment and associates it with an invoice. If the file
            /// already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateHeaderAttachmentAsync( this ICustomerInvoice operations, string invoiceNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateHeaderAttachmentWithHttpMessagesAsync(invoiceNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates an attachment and associates it with a certain invoice line. If
            /// the file already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the invoice
            /// </param>
            /// <param name='lineNumber'>
            /// Specifies line number
            /// </param>
            public static void CreateLineAttachment(this ICustomerInvoice operations, string invoiceNumber, int? lineNumber)
            {
                Task.Factory.StartNew(s => ((ICustomerInvoice)s).CreateLineAttachmentAsync(invoiceNumber, lineNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an attachment and associates it with a certain invoice line. If
            /// the file already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the invoice
            /// </param>
            /// <param name='lineNumber'>
            /// Specifies line number
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateLineAttachmentAsync( this ICustomerInvoice operations, string invoiceNumber, int? lineNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateLineAttachmentWithHttpMessagesAsync(invoiceNumber, lineNumber, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
