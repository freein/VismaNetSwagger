// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class InventoryIssueExtensions
    {
            /// <summary>
            /// Get a range of Inventory items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<InventoryIssueDto> GetAll(this IInventoryIssue operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((IInventoryIssue)s).GetAllAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of Inventory items
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<InventoryIssueDto>> GetAllAsync( this IInventoryIssue operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an inventory item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryIssue'>
            /// Define the data for the inventory issue to create
            /// </param>
            public static void Post(this IInventoryIssue operations, InventoryIssueUpdateDto inventoryIssue)
            {
                Task.Factory.StartNew(s => ((IInventoryIssue)s).PostAsync(inventoryIssue), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an inventory item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryIssue'>
            /// Define the data for the inventory issue to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync( this IInventoryIssue operations, InventoryIssueUpdateDto inventoryIssue, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostWithHttpMessagesAsync(inventoryIssue, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific Inventory Issue document
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryIssueNumber'>
            /// Identifies the Inventory Issue document
            /// </param>
            public static InventoryIssueDto Get(this IInventoryIssue operations, string inventoryIssueNumber)
            {
                return Task.Factory.StartNew(s => ((IInventoryIssue)s).GetAsync(inventoryIssueNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Inventory Issue document
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryIssueNumber'>
            /// Identifies the Inventory Issue document
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InventoryIssueDto> GetAsync( this IInventoryIssue operations, string inventoryIssueNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(inventoryIssueNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Release inventory operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the released issue to be released
            /// </param>
            public static ReleaseInventoryDocumentActionResultDto ReleaseDocument(this IInventoryIssue operations, string invoiceNumber)
            {
                return Task.Factory.StartNew(s => ((IInventoryIssue)s).ReleaseDocumentAsync(invoiceNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Release inventory operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the released issue to be released
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseInventoryDocumentActionResultDto> ReleaseDocumentAsync( this IInventoryIssue operations, string invoiceNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReleaseDocumentWithHttpMessagesAsync(invoiceNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific inventory item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='issueRefNumber'>
            /// Identifies the inventory item to update
            /// </param>
            /// <param name='issue'>
            /// The data to update for inventory item
            /// </param>
            public static void Put(this IInventoryIssue operations, string issueRefNumber, InventoryIssueUpdateDto issue)
            {
                Task.Factory.StartNew(s => ((IInventoryIssue)s).PutAsync(issueRefNumber, issue), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific inventory item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='issueRefNumber'>
            /// Identifies the inventory item to update
            /// </param>
            /// <param name='issue'>
            /// The data to update for inventory item
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this IInventoryIssue operations, string issueRefNumber, InventoryIssueUpdateDto issue, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(issueRefNumber, issue, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
