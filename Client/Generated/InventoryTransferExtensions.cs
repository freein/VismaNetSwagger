// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class InventoryTransferExtensions
    {
            /// <summary>
            /// Get a range of Inventory Transfers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<InventoryTransferDto> GetAll(this IInventoryTransfer operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((IInventoryTransfer)s).GetAllAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of Inventory Transfers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<InventoryTransferDto>> GetAllAsync( this IInventoryTransfer operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an inventory transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryTransfer'>
            /// Define the data for the inventory transfer to create
            /// </param>
            public static void Post(this IInventoryTransfer operations, InventoryTransferUpdateDto inventoryTransfer)
            {
                Task.Factory.StartNew(s => ((IInventoryTransfer)s).PostAsync(inventoryTransfer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an inventory transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryTransfer'>
            /// Define the data for the inventory transfer to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync( this IInventoryTransfer operations, InventoryTransferUpdateDto inventoryTransfer, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostWithHttpMessagesAsync(inventoryTransfer, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific Inventory Transfer document
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryTransferNumber'>
            /// Identifies the Inventory Transfer document
            /// </param>
            public static InventoryTransferDto Get(this IInventoryTransfer operations, string inventoryTransferNumber)
            {
                return Task.Factory.StartNew(s => ((IInventoryTransfer)s).GetAsync(inventoryTransferNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Inventory Transfer document
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='inventoryTransferNumber'>
            /// Identifies the Inventory Transfer document
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InventoryTransferDto> GetAsync( this IInventoryTransfer operations, string inventoryTransferNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(inventoryTransferNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Release inventory operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferNumber'>
            /// Reference number of the released transfer to be released
            /// </param>
            public static ReleaseInventoryDocumentActionResultDto ReleaseDocument(this IInventoryTransfer operations, string transferNumber)
            {
                return Task.Factory.StartNew(s => ((IInventoryTransfer)s).ReleaseDocumentAsync(transferNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Release inventory operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferNumber'>
            /// Reference number of the released transfer to be released
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseInventoryDocumentActionResultDto> ReleaseDocumentAsync( this IInventoryTransfer operations, string transferNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReleaseDocumentWithHttpMessagesAsync(transferNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific inventory transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferRefNumber'>
            /// Identifies the inventory transfer to update
            /// </param>
            /// <param name='transfer'>
            /// The data to update for inventory transfer
            /// </param>
            public static void Put(this IInventoryTransfer operations, string transferRefNumber, InventoryTransferUpdateDto transfer)
            {
                Task.Factory.StartNew(s => ((IInventoryTransfer)s).PutAsync(transferRefNumber, transfer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific inventory transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transferRefNumber'>
            /// Identifies the inventory transfer to update
            /// </param>
            /// <param name='transfer'>
            /// The data to update for inventory transfer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this IInventoryTransfer operations, string transferRefNumber, InventoryTransferUpdateDto transfer, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(transferRefNumber, transfer, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
