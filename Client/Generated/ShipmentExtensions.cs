// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class ShipmentExtensions
    {
            /// <summary>
            /// Get a range of SO Shipments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<ShipmentDto> GetAllShipments(this IShipment operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((IShipment)s).GetAllShipmentsAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of SO Shipments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ShipmentDto>> GetAllShipmentsAsync( this IShipment operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllShipmentsWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific Shipment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentNbr'>
            /// Identifies the Shipment
            /// </param>
            public static ShipmentDto Get(this IShipment operations, string shipmentNbr)
            {
                return Task.Factory.StartNew(s => ((IShipment)s).GetAsync(shipmentNbr), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Shipment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentNbr'>
            /// Identifies the Shipment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShipmentDto> GetAsync( this IShipment operations, string shipmentNbr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(shipmentNbr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific Shipment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentNumber'>
            /// Identifies the Shipment to update
            /// </param>
            /// <param name='shipmentUpdateDto'>
            /// Defines the data for the Shipment to update
            /// </param>
            public static void Put(this IShipment operations, string shipmentNumber, ShipmentUpdateDto shipmentUpdateDto)
            {
                Task.Factory.StartNew(s => ((IShipment)s).PutAsync(shipmentNumber, shipmentUpdateDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific Shipment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentNumber'>
            /// Identifies the Shipment to update
            /// </param>
            /// <param name='shipmentUpdateDto'>
            /// Defines the data for the Shipment to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this IShipment operations, string shipmentNumber, ShipmentUpdateDto shipmentUpdateDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(shipmentNumber, shipmentUpdateDto, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Confirm shipment operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentNumber'>
            /// Reference number of the shipment to be confirmed
            /// </param>
            /// <param name='confirmShipmentActionDto'>
            /// Defines the data for the action
            /// </param>
            public static ConfirmShipmentActionResultDto ConfirmShipment(this IShipment operations, string shipmentNumber, object confirmShipmentActionDto)
            {
                return Task.Factory.StartNew(s => ((IShipment)s).ConfirmShipmentAsync(shipmentNumber, confirmShipmentActionDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Confirm shipment operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentNumber'>
            /// Reference number of the shipment to be confirmed
            /// </param>
            /// <param name='confirmShipmentActionDto'>
            /// Defines the data for the action
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfirmShipmentActionResultDto> ConfirmShipmentAsync( this IShipment operations, string shipmentNumber, object confirmShipmentActionDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConfirmShipmentWithHttpMessagesAsync(shipmentNumber, confirmShipmentActionDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
