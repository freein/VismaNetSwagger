// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class PurchaseReceiptBasicExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='receiptType'>
            /// Possible values for this parameter include: 'PoReceipt', 'PoReturn',
            /// 'TransferReceipt'
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<PurchaseReceiptBasicDto> GetAllReceiptBasic(this IPurchaseReceiptBasic operations, string receiptType = default(string), string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((IPurchaseReceiptBasic)s).GetAllReceiptBasicAsync(receiptType, greaterThanValue, numberToRead, skipRecords, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='receiptType'>
            /// Possible values for this parameter include: 'PoReceipt', 'PoReturn',
            /// 'TransferReceipt'
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PurchaseReceiptBasicDto>> GetAllReceiptBasicAsync( this IPurchaseReceiptBasic operations, string receiptType = default(string), string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllReceiptBasicWithHttpMessagesAsync(receiptType, greaterThanValue, numberToRead, skipRecords, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific Purchase Receipt
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='receiptNbr'>
            /// Identifies the Purchase Receipt
            /// </param>
            public static PurchaseReceiptBasicDto GetPurchaseReceiptBasic(this IPurchaseReceiptBasic operations, string receiptNbr)
            {
                return Task.Factory.StartNew(s => ((IPurchaseReceiptBasic)s).GetPurchaseReceiptBasicAsync(receiptNbr), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Purchase Receipt
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='receiptNbr'>
            /// Identifies the Purchase Receipt
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PurchaseReceiptBasicDto> GetPurchaseReceiptBasicAsync( this IPurchaseReceiptBasic operations, string receiptNbr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPurchaseReceiptBasicWithHttpMessagesAsync(receiptNbr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
