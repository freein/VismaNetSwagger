// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class JournalTransactionExtensions
    {
            /// <summary>
            /// Get a range of Journal Transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<JournalTransactionDto> GetAllJournalTransactions(this IJournalTransaction operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((IJournalTransaction)s).GetAllJournalTransactionsAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of Journal Transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<JournalTransactionDto>> GetAllJournalTransactionsAsync( this IJournalTransaction operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllJournalTransactionsWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Journal Transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='journalTransaction'>
            /// Defines the data for the Journal Transaction to create
            /// </param>
            public static void Post(this IJournalTransaction operations, JournalTransactionUpdateDto journalTransaction)
            {
                Task.Factory.StartNew(s => ((IJournalTransaction)s).PostAsync(journalTransaction), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Journal Transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='journalTransaction'>
            /// Defines the data for the Journal Transaction to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync( this IJournalTransaction operations, JournalTransactionUpdateDto journalTransaction, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostWithHttpMessagesAsync(journalTransaction, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific Journal Transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='journalTransactionNumber'>
            /// Identifies the Journal Transaction
            /// </param>
            public static JournalTransactionDto GetSpecificJournalTransactions(this IJournalTransaction operations, string journalTransactionNumber)
            {
                return Task.Factory.StartNew(s => ((IJournalTransaction)s).GetSpecificJournalTransactionsAsync(journalTransactionNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Journal Transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='journalTransactionNumber'>
            /// Identifies the Journal Transaction
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JournalTransactionDto> GetSpecificJournalTransactionsAsync( this IJournalTransaction operations, string journalTransactionNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSpecificJournalTransactionsWithHttpMessagesAsync(journalTransactionNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Journal Transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='journalTransactionNumber'>
            /// Identifies the Journal Transaction to update
            /// </param>
            /// <param name='journalTransaction'>
            /// Defines the data for the Journal Transaction to update
            /// </param>
            public static void Put(this IJournalTransaction operations, string journalTransactionNumber, JournalTransactionUpdateDto journalTransaction)
            {
                Task.Factory.StartNew(s => ((IJournalTransaction)s).PutAsync(journalTransactionNumber, journalTransaction), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Journal Transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='journalTransactionNumber'>
            /// Identifies the Journal Transaction to update
            /// </param>
            /// <param name='journalTransaction'>
            /// Defines the data for the Journal Transaction to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this IJournalTransaction operations, string journalTransactionNumber, JournalTransactionUpdateDto journalTransaction, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(journalTransactionNumber, journalTransaction, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
