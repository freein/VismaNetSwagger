// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class CreditNoteExtensions
    {
            /// <summary>
            /// Get a range of Credit Notes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<CreditNoteDto> GetAllCreditNotesDto(this ICreditNote operations, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ICreditNote)s).GetAllCreditNotesDtoAsync(greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of Credit Notes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CreditNoteDto>> GetAllCreditNotesDtoAsync( this ICreditNote operations, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCreditNotesDtoWithHttpMessagesAsync(greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Credit Note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteUpdateDto'>
            /// Defines the data for the Credit Note to create
            /// </param>
            public static void CreateCreditNote(this ICreditNote operations, CreditNoteUpdateDto creditNoteUpdateDto)
            {
                Task.Factory.StartNew(s => ((ICreditNote)s).CreateCreditNoteAsync(creditNoteUpdateDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Credit Note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteUpdateDto'>
            /// Defines the data for the Credit Note to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateCreditNoteAsync( this ICreditNote operations, CreditNoteUpdateDto creditNoteUpdateDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateCreditNoteWithHttpMessagesAsync(creditNoteUpdateDto, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific Credit Note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note
            /// </param>
            public static CreditNoteDto Get(this ICreditNote operations, string creditNoteNumber)
            {
                return Task.Factory.StartNew(s => ((ICreditNote)s).GetAsync(creditNoteNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Credit Note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreditNoteDto> GetAsync( this ICreditNote operations, string creditNoteNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(creditNoteNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific Credit Note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note to update
            /// </param>
            /// <param name='creditNoteUpdateDto'>
            /// Defines the data for the Credit Note to update
            /// </param>
            public static void Put(this ICreditNote operations, string creditNoteNumber, CreditNoteUpdateDto creditNoteUpdateDto)
            {
                Task.Factory.StartNew(s => ((ICreditNote)s).PutAsync(creditNoteNumber, creditNoteUpdateDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific Credit Note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note to update
            /// </param>
            /// <param name='creditNoteUpdateDto'>
            /// Defines the data for the Credit Note to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this ICreditNote operations, string creditNoteNumber, CreditNoteUpdateDto creditNoteUpdateDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(creditNoteNumber, creditNoteUpdateDto, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Release credit note operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Reference number of the credit note to be released
            /// </param>
            /// <param name='releaseActionDto'>
            /// </param>
            public static ReleaseInvoiceActionResultDto ReleaseInvoice(this ICreditNote operations, string creditNoteNumber, object releaseActionDto)
            {
                return Task.Factory.StartNew(s => ((ICreditNote)s).ReleaseInvoiceAsync(creditNoteNumber, releaseActionDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Release credit note operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Reference number of the credit note to be released
            /// </param>
            /// <param name='releaseActionDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseInvoiceActionResultDto> ReleaseInvoiceAsync( this ICreditNote operations, string creditNoteNumber, object releaseActionDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReleaseInvoiceWithHttpMessagesAsync(creditNoteNumber, releaseActionDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an attachment and associates it with a Credit Note. If the file
            /// already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note
            /// </param>
            public static void CreateHeaderAttachment(this ICreditNote operations, string creditNoteNumber)
            {
                Task.Factory.StartNew(s => ((ICreditNote)s).CreateHeaderAttachmentAsync(creditNoteNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an attachment and associates it with a Credit Note. If the file
            /// already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateHeaderAttachmentAsync( this ICreditNote operations, string creditNoteNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateHeaderAttachmentWithHttpMessagesAsync(creditNoteNumber, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates an attachment and associates it with a certain Credit Note line.
            /// If the file already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note
            /// </param>
            /// <param name='lineNumber'>
            /// Specifies line number
            /// </param>
            public static void CreateLineAttachment(this ICreditNote operations, string creditNoteNumber, int? lineNumber)
            {
                Task.Factory.StartNew(s => ((ICreditNote)s).CreateLineAttachmentAsync(creditNoteNumber, lineNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an attachment and associates it with a certain Credit Note line.
            /// If the file already exists, a new revision is created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='creditNoteNumber'>
            /// Identifies the Credit Note
            /// </param>
            /// <param name='lineNumber'>
            /// Specifies line number
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateLineAttachmentAsync( this ICreditNote operations, string creditNoteNumber, int? lineNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateLineAttachmentWithHttpMessagesAsync(creditNoteNumber, lineNumber, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
