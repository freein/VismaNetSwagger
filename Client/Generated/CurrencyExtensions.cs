// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class CurrencyExtensions
    {
            /// <summary>
            /// Gets all available Currencies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CurrencyDto> GetAllCurrencies(this ICurrency operations)
            {
                return Task.Factory.StartNew(s => ((ICurrency)s).GetAllCurrenciesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available Currencies
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CurrencyDto>> GetAllCurrenciesAsync( this ICurrency operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllCurrenciesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific Currency
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='curyId'>
            /// </param>
            public static CurrencyDto GetSpecificCurrency(this ICurrency operations, string curyId)
            {
                return Task.Factory.StartNew(s => ((ICurrency)s).GetSpecificCurrencyAsync(curyId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Currency
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='curyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CurrencyDto> GetSpecificCurrencyAsync( this ICurrency operations, string curyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSpecificCurrencyWithHttpMessagesAsync(curyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
