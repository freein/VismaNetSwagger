// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class SupplierInvoiceExtensions
    {
            /// <summary>
            /// Get a range of Invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<SupplierInvoiceDto> GetAllInvoices(this ISupplierInvoice operations, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISupplierInvoice)s).GetAllInvoicesAsync(greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of Invoices
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SupplierInvoiceDto>> GetAllInvoicesAsync( this ISupplierInvoice operations, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllInvoicesWithHttpMessagesAsync(greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an SupplierInvoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierInvoice'>
            /// Defines the data for the SupplierInvoice to create
            /// </param>
            public static void Post(this ISupplierInvoice operations, SupplierInvoiceUpdateDto supplierInvoice)
            {
                Task.Factory.StartNew(s => ((ISupplierInvoice)s).PostAsync(supplierInvoice), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an SupplierInvoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierInvoice'>
            /// Defines the data for the SupplierInvoice to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync( this ISupplierInvoice operations, SupplierInvoiceUpdateDto supplierInvoice, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostWithHttpMessagesAsync(supplierInvoice, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the Invoice
            /// </param>
            public static SupplierInvoiceDto Get(this ISupplierInvoice operations, string invoiceNumber)
            {
                return Task.Factory.StartNew(s => ((ISupplierInvoice)s).GetAsync(invoiceNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Invoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Identifies the Invoice
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupplierInvoiceDto> GetAsync( this ISupplierInvoice operations, string invoiceNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(invoiceNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Release invoice operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the released invoice to be reversed
            /// </param>
            /// <param name='releaseActionDto'>
            /// </param>
            public static ReleaseSupplierInvoiceActionResultDto ReleaseInvoice(this ISupplierInvoice operations, string invoiceNumber, object releaseActionDto)
            {
                return Task.Factory.StartNew(s => ((ISupplierInvoice)s).ReleaseInvoiceAsync(invoiceNumber, releaseActionDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Release invoice operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='invoiceNumber'>
            /// Reference number of the released invoice to be reversed
            /// </param>
            /// <param name='releaseActionDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleaseSupplierInvoiceActionResultDto> ReleaseInvoiceAsync( this ISupplierInvoice operations, string invoiceNumber, object releaseActionDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReleaseInvoiceWithHttpMessagesAsync(invoiceNumber, releaseActionDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific SupplierInvoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierInvoiceNumber'>
            /// Identifies the SupplierInvoice to update
            /// </param>
            /// <param name='supplierInvoice'>
            /// Defines the data for the Invoice to update
            /// </param>
            public static void Put(this ISupplierInvoice operations, string supplierInvoiceNumber, SupplierInvoiceUpdateDto supplierInvoice)
            {
                Task.Factory.StartNew(s => ((ISupplierInvoice)s).PutAsync(supplierInvoiceNumber, supplierInvoice), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific SupplierInvoice
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierInvoiceNumber'>
            /// Identifies the SupplierInvoice to update
            /// </param>
            /// <param name='supplierInvoice'>
            /// Defines the data for the Invoice to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this ISupplierInvoice operations, string supplierInvoiceNumber, SupplierInvoiceUpdateDto supplierInvoice, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(supplierInvoiceNumber, supplierInvoice, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
