// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// This class represents a ApInvoice in SupplierInvoiceController. Used
    /// by getting data.
    /// </summary>
    public partial class SupplierInvoiceDto
    {
        /// <summary>
        /// Initializes a new instance of the SupplierInvoiceDto class.
        /// </summary>
        public SupplierInvoiceDto() { }

        /// <summary>
        /// Initializes a new instance of the SupplierInvoiceDto class.
        /// </summary>
        public SupplierInvoiceDto(IList<SupplierInvoiceLineDto> invoiceLines = default(IList<SupplierInvoiceLineDto>), bool? hold = default(bool?), string paymentRefNo = default(string), CreditTermsDto creditTerms = default(CreditTermsDto), DateTime? cashDiscountDate = default(DateTime?), double? detailTotal = default(double?), double? detailTotalInCurrency = default(double?), double? vatTaxableTotal = default(double?), double? vatTaxableTotalInCurrency = default(double?), double? vatExemptTotal = default(double?), double? vatExemptTotalInCurrency = default(double?), double? withholdingTax = default(double?), double? withholdingTaxInCurrency = default(double?), SupplierNumberDto supplier = default(SupplierNumberDto), string documentType = default(string), string referenceNumber = default(string), string postPeriod = default(string), string financialPeriod = default(string), DateTime? date = default(DateTime?), DateTime? dueDate = default(DateTime?), string approvalStatus = default(string), string status = default(string), string currencyId = default(string), double? balance = default(double?), double? balanceInCurrency = default(double?), double? cashDiscount = default(double?), double? cashDiscountInCurrency = default(double?), PaymentMethodIdDescriptionDto paymentMethod = default(PaymentMethodIdDescriptionDto), string supplierReference = default(string), string description = default(string), DateTime? createdDateTime = default(DateTime?), DateTime? lastModifiedDateTime = default(DateTime?), string note = default(string), LocationDto location = default(LocationDto), double? vatTotal = default(double?), double? vatTotalInCurrency = default(double?))
        {
            InvoiceLines = invoiceLines;
            Hold = hold;
            PaymentRefNo = paymentRefNo;
            CreditTerms = creditTerms;
            CashDiscountDate = cashDiscountDate;
            DetailTotal = detailTotal;
            DetailTotalInCurrency = detailTotalInCurrency;
            VatTaxableTotal = vatTaxableTotal;
            VatTaxableTotalInCurrency = vatTaxableTotalInCurrency;
            VatExemptTotal = vatExemptTotal;
            VatExemptTotalInCurrency = vatExemptTotalInCurrency;
            WithholdingTax = withholdingTax;
            WithholdingTaxInCurrency = withholdingTaxInCurrency;
            Supplier = supplier;
            DocumentType = documentType;
            ReferenceNumber = referenceNumber;
            PostPeriod = postPeriod;
            FinancialPeriod = financialPeriod;
            Date = date;
            DueDate = dueDate;
            ApprovalStatus = approvalStatus;
            Status = status;
            CurrencyId = currencyId;
            Balance = balance;
            BalanceInCurrency = balanceInCurrency;
            CashDiscount = cashDiscount;
            CashDiscountInCurrency = cashDiscountInCurrency;
            PaymentMethod = paymentMethod;
            SupplierReference = supplierReference;
            Description = description;
            CreatedDateTime = createdDateTime;
            LastModifiedDateTime = lastModifiedDateTime;
            Note = note;
            Location = location;
            VatTotal = vatTotal;
            VatTotalInCurrency = vatTotalInCurrency;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invoiceLines")]
        public IList<SupplierInvoiceLineDto> InvoiceLines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hold")]
        public bool? Hold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "paymentRefNo")]
        public string PaymentRefNo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "creditTerms")]
        public CreditTermsDto CreditTerms { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cashDiscountDate")]
        public DateTime? CashDiscountDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "detailTotal")]
        public double? DetailTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "detailTotalInCurrency")]
        public double? DetailTotalInCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatTaxableTotal")]
        public double? VatTaxableTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatTaxableTotalInCurrency")]
        public double? VatTaxableTotalInCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatExemptTotal")]
        public double? VatExemptTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatExemptTotalInCurrency")]
        public double? VatExemptTotalInCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "withholdingTax")]
        public double? WithholdingTax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "withholdingTaxInCurrency")]
        public double? WithholdingTaxInCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "supplier")]
        public SupplierNumberDto Supplier { get; set; }

        /// <summary>
        /// Possible values for this property include: 'Check', 'CreditAdj',
        /// 'DebitAdj', 'Invoice', 'Prepayment', 'QuickCheck', 'Refund',
        /// 'VoidCheck', 'VoidQuickCheck'.
        /// </summary>
        [JsonProperty(PropertyName = "documentType")]
        public string DocumentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "referenceNumber")]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "postPeriod")]
        public string PostPeriod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "financialPeriod")]
        public string FinancialPeriod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Possible values for this property include: 'New', 'Canceled',
        /// 'SentToApproval', 'ReceivedByApproval', 'InProgressApproval',
        /// 'RejectedInApproval', 'ApprovedInApproval',
        /// 'ActiveWorkflowApproval'.
        /// </summary>
        [JsonProperty(PropertyName = "approvalStatus")]
        public string ApprovalStatus { get; set; }

        /// <summary>
        /// Possible values for this property include: 'Hold', 'Balanced',
        /// 'Voided', 'Scheduled', 'Open', 'Closed', 'Printed', 'Prebooked'.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currencyId")]
        public string CurrencyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "balance")]
        public double? Balance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "balanceInCurrency")]
        public double? BalanceInCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cashDiscount")]
        public double? CashDiscount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cashDiscountInCurrency")]
        public double? CashDiscountInCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "paymentMethod")]
        public PaymentMethodIdDescriptionDto PaymentMethod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "supplierReference")]
        public string SupplierReference { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTime")]
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public string Note { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public LocationDto Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatTotal")]
        public double? VatTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatTotalInCurrency")]
        public double? VatTotalInCurrency { get; set; }

    }
}
