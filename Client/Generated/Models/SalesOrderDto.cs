// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// This class represents a SOOrder in SOOrderController. Used by getting
    /// data.
    /// </summary>
    public partial class SalesOrderDto
    {
        /// <summary>
        /// Initializes a new instance of the SalesOrderDto class.
        /// </summary>
        public SalesOrderDto() { }

        /// <summary>
        /// Initializes a new instance of the SalesOrderDto class.
        /// </summary>
        public SalesOrderDto(int? project = default(int?), bool? printDescriptionOnInvoice = default(bool?), bool? printNoteOnExternalDocuments = default(bool?), bool? printNoteOnInternalDocuments = default(bool?), SalesOrderContactDto soBillingContact = default(SalesOrderContactDto), SalesOrderAddressDto soBillingAddress = default(SalesOrderAddressDto), BranchNumberDto branch = default(BranchNumberDto), VatZoneDto customerVATZone = default(VatZoneDto), bool? invoiceSeparately = default(bool?), string invoiceNbr = default(string), DateTime? invoiceDate = default(DateTime?), CreditTermsDto terms = default(CreditTermsDto), DateTime? dueDate = default(DateTime?), DateTime? cashDiscountDate = default(DateTime?), string postPeriod = default(string), SalesPersonDto salesPerson = default(SalesPersonDto), UserDescriptionDto owner = default(UserDescriptionDto), string origOrderType = default(string), string origOrderNbr = default(string), SalesOrderContactDto soShippingContact = default(SalesOrderContactDto), SalesOrderAddressDto soShippingAddress = default(SalesOrderAddressDto), DateTime? schedShipment = default(DateTime?), bool? shipSeparately = default(bool?), string shipComplete = default(string), DateTime? cancelBy = default(DateTime?), bool? canceled = default(bool?), WarehouseDto preferredWarehouse = default(WarehouseDto), CarrierDescriptionDto shipVia = default(CarrierDescriptionDto), FOBPointDescriptionDto fobPoint = default(FOBPointDescriptionDto), int? priority = default(int?), ShippingTermsDescriptionDto shippingTerms = default(ShippingTermsDescriptionDto), ShippingZoneDescriptionDto shippingZone = default(ShippingZoneDescriptionDto), bool? residentialDelivery = default(bool?), bool? saturdayDelivery = default(bool?), bool? insurance = default(bool?), SigmaIntrastatTransactionDescriptionDto transactionType = default(SigmaIntrastatTransactionDescriptionDto), IList<SalesOrderLineDto> lines = default(IList<SalesOrderLineDto>), string orderType = default(string), string orderNo = default(string), string status = default(string), bool? hold = default(bool?), DateTime? date = default(DateTime?), DateTime? requestOn = default(DateTime?), string customerOrder = default(string), string customerRefNo = default(string), CustomerDescriptionDto customer = default(CustomerDescriptionDto), LocationDto location = default(LocationDto), string currency = default(string), string description = default(string), double? orderTotal = default(double?), double? vatTaxableTotal = default(double?), double? vatExemptTotal = default(double?), double? taxTotal = default(double?), DateTime? lastModifiedDateTime = default(DateTime?))
        {
            Project = project;
            PrintDescriptionOnInvoice = printDescriptionOnInvoice;
            PrintNoteOnExternalDocuments = printNoteOnExternalDocuments;
            PrintNoteOnInternalDocuments = printNoteOnInternalDocuments;
            SoBillingContact = soBillingContact;
            SoBillingAddress = soBillingAddress;
            Branch = branch;
            CustomerVATZone = customerVATZone;
            InvoiceSeparately = invoiceSeparately;
            InvoiceNbr = invoiceNbr;
            InvoiceDate = invoiceDate;
            Terms = terms;
            DueDate = dueDate;
            CashDiscountDate = cashDiscountDate;
            PostPeriod = postPeriod;
            SalesPerson = salesPerson;
            Owner = owner;
            OrigOrderType = origOrderType;
            OrigOrderNbr = origOrderNbr;
            SoShippingContact = soShippingContact;
            SoShippingAddress = soShippingAddress;
            SchedShipment = schedShipment;
            ShipSeparately = shipSeparately;
            ShipComplete = shipComplete;
            CancelBy = cancelBy;
            Canceled = canceled;
            PreferredWarehouse = preferredWarehouse;
            ShipVia = shipVia;
            FobPoint = fobPoint;
            Priority = priority;
            ShippingTerms = shippingTerms;
            ShippingZone = shippingZone;
            ResidentialDelivery = residentialDelivery;
            SaturdayDelivery = saturdayDelivery;
            Insurance = insurance;
            TransactionType = transactionType;
            Lines = lines;
            OrderType = orderType;
            OrderNo = orderNo;
            Status = status;
            Hold = hold;
            Date = date;
            RequestOn = requestOn;
            CustomerOrder = customerOrder;
            CustomerRefNo = customerRefNo;
            Customer = customer;
            Location = location;
            Currency = currency;
            Description = description;
            OrderTotal = orderTotal;
            VatTaxableTotal = vatTaxableTotal;
            VatExemptTotal = vatExemptTotal;
            TaxTotal = taxTotal;
            LastModifiedDateTime = lastModifiedDateTime;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "project")]
        public int? Project { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "printDescriptionOnInvoice")]
        public bool? PrintDescriptionOnInvoice { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "printNoteOnExternalDocuments")]
        public bool? PrintNoteOnExternalDocuments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "printNoteOnInternalDocuments")]
        public bool? PrintNoteOnInternalDocuments { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "soBillingContact")]
        public SalesOrderContactDto SoBillingContact { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "soBillingAddress")]
        public SalesOrderAddressDto SoBillingAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "branch")]
        public BranchNumberDto Branch { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customerVATZone")]
        public VatZoneDto CustomerVATZone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invoiceSeparately")]
        public bool? InvoiceSeparately { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invoiceNbr")]
        public string InvoiceNbr { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "invoiceDate")]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "terms")]
        public CreditTermsDto Terms { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dueDate")]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cashDiscountDate")]
        public DateTime? CashDiscountDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "postPeriod")]
        public string PostPeriod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "salesPerson")]
        public SalesPersonDto SalesPerson { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public UserDescriptionDto Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "origOrderType")]
        public string OrigOrderType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "origOrderNbr")]
        public string OrigOrderNbr { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "soShippingContact")]
        public SalesOrderContactDto SoShippingContact { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "soShippingAddress")]
        public SalesOrderAddressDto SoShippingAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schedShipment")]
        public DateTime? SchedShipment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shipSeparately")]
        public bool? ShipSeparately { get; set; }

        /// <summary>
        /// Possible values for this property include: 'BackOrderAllowed',
        /// 'CancelRemainder', 'ShipComplete'.
        /// </summary>
        [JsonProperty(PropertyName = "shipComplete")]
        public string ShipComplete { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cancelBy")]
        public DateTime? CancelBy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canceled")]
        public bool? Canceled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "preferredWarehouse")]
        public WarehouseDto PreferredWarehouse { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shipVia")]
        public CarrierDescriptionDto ShipVia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fobPoint")]
        public FOBPointDescriptionDto FobPoint { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shippingTerms")]
        public ShippingTermsDescriptionDto ShippingTerms { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "shippingZone")]
        public ShippingZoneDescriptionDto ShippingZone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "residentialDelivery")]
        public bool? ResidentialDelivery { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "saturdayDelivery")]
        public bool? SaturdayDelivery { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "insurance")]
        public bool? Insurance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transactionType")]
        public SigmaIntrastatTransactionDescriptionDto TransactionType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lines")]
        public IList<SalesOrderLineDto> Lines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderType")]
        public string OrderType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderNo")]
        public string OrderNo { get; set; }

        /// <summary>
        /// Possible values for this property include: 'Open', 'Hold',
        /// 'CreditHold', 'Completed', 'Cancelled', 'BackOrder', 'Shipping',
        /// 'Invoiced'.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hold")]
        public bool? Hold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestOn")]
        public DateTime? RequestOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customerOrder")]
        public string CustomerOrder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customerRefNo")]
        public string CustomerRefNo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customer")]
        public CustomerDescriptionDto Customer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public LocationDto Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderTotal")]
        public double? OrderTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatTaxableTotal")]
        public double? VatTaxableTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatExemptTotal")]
        public double? VatExemptTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxTotal")]
        public double? TaxTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public DateTime? LastModifiedDateTime { get; set; }

    }
}
