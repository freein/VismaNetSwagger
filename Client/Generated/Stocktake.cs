// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using Models;

    /// <summary>
    /// Stocktake operations.
    /// </summary>
    public partial class Stocktake : IServiceOperations<VismanetAPI>, IStocktake
    {
        /// <summary>
        /// Initializes a new instance of the Stocktake class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        public Stocktake(VismanetAPI client)
        {
            if (client == null) 
            {
                throw new ArgumentNullException("client");
            }
            this.Client = client;
        }

        /// <summary>
        /// Gets a reference to the VismanetAPI
        /// </summary>
        public VismanetAPI Client { get; private set; }

        /// <summary>
        /// Get a range of stocktakes
        /// </summary>
        /// <param name='warehouse'>
        /// </param>
        /// <param name='location'>
        /// </param>
        /// <param name='inventory'>
        /// </param>
        /// <param name='lotSerialNumber'>
        /// </param>
        /// <param name='summaryStatus'>
        /// Possible values for this parameter include: 'Cancelled', 'Completed',
        /// 'Counting', 'Entering'
        /// </param>
        /// <param name='numberToRead'>
        /// </param>
        /// <param name='startWithLine'>
        /// </param>
        /// <param name='endWithLine'>
        /// </param>
        /// <param name='freezeDateTime'>
        /// </param>
        /// <param name='freezeDateTimeCondition'>
        /// </param>
        /// <param name='lastModifiedDateTime'>
        /// </param>
        /// <param name='lastModifiedDateTimeCondition'>
        /// </param>
        /// <param name='expirationDateTime'>
        /// </param>
        /// <param name='expirationDateTimeCondition'>
        /// </param>
        /// <param name='status'>
        /// Possible values for this parameter include: 'NotEntered', 'Entered',
        /// 'Skipped'
        /// </param>
        /// <param name='skipRecords'>
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<IList<StocktakeDto>>> GetAllStocktakesWithHttpMessagesAsync(string warehouse = default(string), string location = default(string), string inventory = default(string), string lotSerialNumber = default(string), string summaryStatus = default(string), int? numberToRead = default(int?), int? startWithLine = default(int?), int? endWithLine = default(int?), string freezeDateTime = default(string), string freezeDateTimeCondition = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), string expirationDateTime = default(string), string expirationDateTimeCondition = default(string), string status = default(string), int? skipRecords = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("warehouse", warehouse);
                tracingParameters.Add("location", location);
                tracingParameters.Add("inventory", inventory);
                tracingParameters.Add("lotSerialNumber", lotSerialNumber);
                tracingParameters.Add("summaryStatus", summaryStatus);
                tracingParameters.Add("numberToRead", numberToRead);
                tracingParameters.Add("startWithLine", startWithLine);
                tracingParameters.Add("endWithLine", endWithLine);
                tracingParameters.Add("freezeDateTime", freezeDateTime);
                tracingParameters.Add("freezeDateTimeCondition", freezeDateTimeCondition);
                tracingParameters.Add("lastModifiedDateTime", lastModifiedDateTime);
                tracingParameters.Add("lastModifiedDateTimeCondition", lastModifiedDateTimeCondition);
                tracingParameters.Add("expirationDateTime", expirationDateTime);
                tracingParameters.Add("expirationDateTimeCondition", expirationDateTimeCondition);
                tracingParameters.Add("status", status);
                tracingParameters.Add("skipRecords", skipRecords);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetAllStocktakes", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "controller/api/v1/stocktake").ToString();
            List<string> _queryParameters = new List<string>();
            if (warehouse != null)
            {
                _queryParameters.Add(string.Format("warehouse={0}", Uri.EscapeDataString(warehouse)));
            }
            if (location != null)
            {
                _queryParameters.Add(string.Format("location={0}", Uri.EscapeDataString(location)));
            }
            if (inventory != null)
            {
                _queryParameters.Add(string.Format("inventory={0}", Uri.EscapeDataString(inventory)));
            }
            if (lotSerialNumber != null)
            {
                _queryParameters.Add(string.Format("lotSerialNumber={0}", Uri.EscapeDataString(lotSerialNumber)));
            }
            if (summaryStatus != null)
            {
                _queryParameters.Add(string.Format("summaryStatus={0}", Uri.EscapeDataString(summaryStatus)));
            }
            if (numberToRead != null)
            {
                _queryParameters.Add(string.Format("numberToRead={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(numberToRead, this.Client.SerializationSettings).Trim('"'))));
            }
            if (startWithLine != null)
            {
                _queryParameters.Add(string.Format("startWithLine={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(startWithLine, this.Client.SerializationSettings).Trim('"'))));
            }
            if (endWithLine != null)
            {
                _queryParameters.Add(string.Format("endWithLine={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(endWithLine, this.Client.SerializationSettings).Trim('"'))));
            }
            if (freezeDateTime != null)
            {
                _queryParameters.Add(string.Format("freezeDateTime={0}", Uri.EscapeDataString(freezeDateTime)));
            }
            if (freezeDateTimeCondition != null)
            {
                _queryParameters.Add(string.Format("freezeDateTimeCondition={0}", Uri.EscapeDataString(freezeDateTimeCondition)));
            }
            if (lastModifiedDateTime != null)
            {
                _queryParameters.Add(string.Format("lastModifiedDateTime={0}", Uri.EscapeDataString(lastModifiedDateTime)));
            }
            if (lastModifiedDateTimeCondition != null)
            {
                _queryParameters.Add(string.Format("lastModifiedDateTimeCondition={0}", Uri.EscapeDataString(lastModifiedDateTimeCondition)));
            }
            if (expirationDateTime != null)
            {
                _queryParameters.Add(string.Format("expirationDateTime={0}", Uri.EscapeDataString(expirationDateTime)));
            }
            if (expirationDateTimeCondition != null)
            {
                _queryParameters.Add(string.Format("expirationDateTimeCondition={0}", Uri.EscapeDataString(expirationDateTimeCondition)));
            }
            if (status != null)
            {
                _queryParameters.Add(string.Format("status={0}", Uri.EscapeDataString(status)));
            }
            if (skipRecords != null)
            {
                _queryParameters.Add(string.Format("skipRecords={0}", Uri.EscapeDataString(SafeJsonConvert.SerializeObject(skipRecords, this.Client.SerializationSettings).Trim('"'))));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<IList<StocktakeDto>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<IList<StocktakeDto>>(_responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get a specific
        /// </summary>
        /// <param name='referenceNumber'>
        /// Identifies the Stocktake
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<StocktakeDto>> GetWithHttpMessagesAsync(string referenceNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (referenceNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "referenceNumber");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("referenceNumber", referenceNumber);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Get", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "controller/api/v1/stocktake/{referenceNumber}").ToString();
            _url = _url.Replace("{referenceNumber}", Uri.EscapeDataString(referenceNumber));
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<StocktakeDto>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = SafeJsonConvert.DeserializeObject<StocktakeDto>(_responseContent, this.Client.DeserializationSettings);
                }
                catch (JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update a specific stocktake
        /// </summary>
        /// <param name='referenceNumber'>
        /// Identifies the stocktake to update
        /// </param>
        /// <param name='stocktake'>
        /// The data to update for stocktake
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public async Task<HttpOperationResponse> PutWithHttpMessagesAsync(string referenceNumber, StocktakeUpdateDto stocktake, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (referenceNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "referenceNumber");
            }
            if (stocktake == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "stocktake");
            }
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("referenceNumber", referenceNumber);
                tracingParameters.Add("stocktake", stocktake);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "Put", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.Client.BaseUri.AbsoluteUri;
            var _url = new Uri(new Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "controller/api/v1/stocktake/{referenceNumber}").ToString();
            _url = _url.Replace("{referenceNumber}", Uri.EscapeDataString(referenceNumber));
            // Create HTTP transport objects
            HttpRequestMessage _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("PUT");
            _httpRequest.RequestUri = new Uri(_url);
            // Set Headers
            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            _requestContent = SafeJsonConvert.SerializeObject(stocktake, this.Client.SerializationSettings);
            _httpRequest.Content = new StringContent(_requestContent, Encoding.UTF8);
            _httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.Client.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 204)
            {
                var ex = new HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
