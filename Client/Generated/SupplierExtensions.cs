// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class SupplierExtensions
    {
            /// <summary>
            /// Get a range of suppliers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<SupplierDto> GetAll(this ISupplier operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetAllAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of suppliers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SupplierDto>> GetAllAsync( this ISupplier operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplier'>
            /// Define the data for the supplier to create
            /// </param>
            public static void Post(this ISupplier operations, SupplierUpdateDto supplier)
            {
                Task.Factory.StartNew(s => ((ISupplier)s).PostAsync(supplier), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplier'>
            /// Define the data for the supplier to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync( this ISupplier operations, SupplierUpdateDto supplier, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostWithHttpMessagesAsync(supplier, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the PO balance of a range of suppliers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<SupplierPOBalanceDto> GetAllSupplierPOBalance(this ISupplier operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetAllSupplierPOBalanceAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the PO balance of a range of suppliers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SupplierPOBalanceDto>> GetAllSupplierPOBalanceAsync( this ISupplier operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSupplierPOBalanceWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the balance of a range of suppliers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<SupplierBalanceDto> GetAllSupplierBalance(this ISupplier operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetAllSupplierBalanceAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the balance of a range of suppliers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SupplierBalanceDto>> GetAllSupplierBalanceAsync( this ISupplier operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllSupplierBalanceWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Identifies the supplier
            /// </param>
            public static SupplierDto Get(this ISupplier operations, string supplierCd)
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetAsync(supplierCd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Identifies the supplier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupplierDto> GetAsync( this ISupplier operations, string supplierCd, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(supplierCd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Identifies the supplier to update
            /// </param>
            /// <param name='supplier'>
            /// The data to update for supplier
            /// </param>
            public static void Put(this ISupplier operations, string supplierCd, SupplierUpdateDto supplier)
            {
                Task.Factory.StartNew(s => ((ISupplier)s).PutAsync(supplierCd, supplier), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Identifies the supplier to update
            /// </param>
            /// <param name='supplier'>
            /// The data to update for supplier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this ISupplier operations, string supplierCd, SupplierUpdateDto supplier, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(supplierCd, supplier, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific supplier's PO balance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Indentifies the supplier for witch to return data
            /// </param>
            public static SupplierPOBalanceDto GetSupplierPOBalance(this ISupplier operations, string supplierCd)
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetSupplierPOBalanceAsync(supplierCd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific supplier's PO balance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Indentifies the supplier for witch to return data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupplierPOBalanceDto> GetSupplierPOBalanceAsync( this ISupplier operations, string supplierCd, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupplierPOBalanceWithHttpMessagesAsync(supplierCd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific supplier's PO balance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Indentifies the supplier for witch to return data
            /// </param>
            public static SupplierBalanceDto GetSupplierBalance(this ISupplier operations, string supplierCd)
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetSupplierBalanceAsync(supplierCd), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific supplier's PO balance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// Indentifies the supplier for witch to return data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupplierBalanceDto> GetSupplierBalanceAsync( this ISupplier operations, string supplierCd, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupplierBalanceWithHttpMessagesAsync(supplierCd, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a range of a Supplier of a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<ContactDto> GetAllContactForSupplier(this ISupplier operations, string supplierCd, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetAllContactForSupplierAsync(supplierCd, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of a Supplier of a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierCd'>
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ContactDto>> GetAllContactForSupplierAsync( this ISupplier operations, string supplierCd, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllContactForSupplierWithHttpMessagesAsync(supplierCd, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a range of documents for a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierNumber'>
            /// Identifies the supplier for which to return data
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<SupplierDocumentDto> GetAllDocumentsForSupplier(this ISupplier operations, string supplierNumber, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetAllDocumentsForSupplierAsync(supplierNumber, greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a range of documents for a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierNumber'>
            /// Identifies the supplier for which to return data
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SupplierDocumentDto>> GetAllDocumentsForSupplierAsync( this ISupplier operations, string supplierNumber, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDocumentsForSupplierWithHttpMessagesAsync(supplierNumber, greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a range of invoices for a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierNumber'>
            /// Identifies the supplier for which to return data
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<SupplierInvoiceDto> GetAllInvoicesForSupplier(this ISupplier operations, string supplierNumber, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISupplier)s).GetAllInvoicesForSupplierAsync(supplierNumber, greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of invoices for a specific supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supplierNumber'>
            /// Identifies the supplier for which to return data
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='released'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SupplierInvoiceDto>> GetAllInvoicesForSupplierAsync( this ISupplier operations, string supplierNumber, string greaterThanValue = default(string), int? released = default(int?), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllInvoicesForSupplierWithHttpMessagesAsync(supplierNumber, greaterThanValue, released, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
