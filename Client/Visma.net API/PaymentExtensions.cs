// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class PaymentExtensions
    {
            /// <summary>
            /// Get a range of Payments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<PaymentDto> GetAllPayments(this IPayment operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((IPayment)s).GetAllPaymentsAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of Payments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PaymentDto>> GetAllPaymentsAsync( this IPayment operations, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPaymentsWithHttpMessagesAsync(greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payment'>
            /// Defines the data for the Payment to create
            /// </param>
            public static void CreatePayment(this IPayment operations, PaymentUpdateDto payment)
            {
                Task.Factory.StartNew(s => ((IPayment)s).CreatePaymentAsync(payment), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payment'>
            /// Defines the data for the Payment to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreatePaymentAsync( this IPayment operations, PaymentUpdateDto payment, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreatePaymentWithHttpMessagesAsync(payment, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific Payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentNumber'>
            /// Identifies the Payment
            /// </param>
            public static PaymentDto Get(this IPayment operations, string paymentNumber)
            {
                return Task.Factory.StartNew(s => ((IPayment)s).GetAsync(paymentNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentNumber'>
            /// Identifies the Payment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PaymentDto> GetAsync( this IPayment operations, string paymentNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(paymentNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific Payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentNumber'>
            /// Identifies the Payment to update
            /// </param>
            /// <param name='payment'>
            /// Defines the data for the Payment to update
            /// </param>
            public static void Put(this IPayment operations, string paymentNumber, PaymentUpdateDto payment)
            {
                Task.Factory.StartNew(s => ((IPayment)s).PutAsync(paymentNumber, payment), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific Payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentNumber'>
            /// Identifies the Payment to update
            /// </param>
            /// <param name='payment'>
            /// Defines the data for the Payment to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this IPayment operations, string paymentNumber, PaymentUpdateDto payment, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(paymentNumber, payment, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Release payment operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentNumber'>
            /// Reference number of the payment to be released
            /// </param>
            /// <param name='releaseActionDto'>
            /// Contains the type of the payment
            /// </param>
            public static ReleasePaymentActionResultDto ReleasePayment(this IPayment operations, string paymentNumber, ReleasePaymentActionDto releaseActionDto)
            {
                return Task.Factory.StartNew(s => ((IPayment)s).ReleasePaymentAsync(paymentNumber, releaseActionDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Release payment operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='paymentNumber'>
            /// Reference number of the payment to be released
            /// </param>
            /// <param name='releaseActionDto'>
            /// Contains the type of the payment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReleasePaymentActionResultDto> ReleasePaymentAsync( this IPayment operations, string paymentNumber, ReleasePaymentActionDto releaseActionDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReleasePaymentWithHttpMessagesAsync(paymentNumber, releaseActionDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
