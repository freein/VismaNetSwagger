// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class StocktakeExtensions
    {
            /// <summary>
            /// Get a range of stocktakes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='warehouse'>
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='inventory'>
            /// </param>
            /// <param name='lotSerialNumber'>
            /// </param>
            /// <param name='summaryStatus'>
            /// Possible values for this parameter include: 'Cancelled', 'Completed',
            /// 'Counting', 'Entering'
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='startWithLine'>
            /// </param>
            /// <param name='endWithLine'>
            /// </param>
            /// <param name='freezeDateTime'>
            /// </param>
            /// <param name='freezeDateTimeCondition'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='expirationDateTime'>
            /// </param>
            /// <param name='expirationDateTimeCondition'>
            /// </param>
            /// <param name='status'>
            /// Possible values for this parameter include: 'NotEntered', 'Entered',
            /// 'Skipped'
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            public static IList<StocktakeDto> GetAllStocktakes(this IStocktake operations, string warehouse = default(string), string location = default(string), string inventory = default(string), string lotSerialNumber = default(string), string summaryStatus = default(string), int? numberToRead = default(int?), int? startWithLine = default(int?), int? endWithLine = default(int?), string freezeDateTime = default(string), string freezeDateTimeCondition = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), string expirationDateTime = default(string), string expirationDateTimeCondition = default(string), string status = default(string), int? skipRecords = default(int?))
            {
                return Task.Factory.StartNew(s => ((IStocktake)s).GetAllStocktakesAsync(warehouse, location, inventory, lotSerialNumber, summaryStatus, numberToRead, startWithLine, endWithLine, freezeDateTime, freezeDateTimeCondition, lastModifiedDateTime, lastModifiedDateTimeCondition, expirationDateTime, expirationDateTimeCondition, status, skipRecords), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of stocktakes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='warehouse'>
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='inventory'>
            /// </param>
            /// <param name='lotSerialNumber'>
            /// </param>
            /// <param name='summaryStatus'>
            /// Possible values for this parameter include: 'Cancelled', 'Completed',
            /// 'Counting', 'Entering'
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='startWithLine'>
            /// </param>
            /// <param name='endWithLine'>
            /// </param>
            /// <param name='freezeDateTime'>
            /// </param>
            /// <param name='freezeDateTimeCondition'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='expirationDateTime'>
            /// </param>
            /// <param name='expirationDateTimeCondition'>
            /// </param>
            /// <param name='status'>
            /// Possible values for this parameter include: 'NotEntered', 'Entered',
            /// 'Skipped'
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StocktakeDto>> GetAllStocktakesAsync( this IStocktake operations, string warehouse = default(string), string location = default(string), string inventory = default(string), string lotSerialNumber = default(string), string summaryStatus = default(string), int? numberToRead = default(int?), int? startWithLine = default(int?), int? endWithLine = default(int?), string freezeDateTime = default(string), string freezeDateTimeCondition = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), string expirationDateTime = default(string), string expirationDateTimeCondition = default(string), string status = default(string), int? skipRecords = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllStocktakesWithHttpMessagesAsync(warehouse, location, inventory, lotSerialNumber, summaryStatus, numberToRead, startWithLine, endWithLine, freezeDateTime, freezeDateTimeCondition, lastModifiedDateTime, lastModifiedDateTimeCondition, expirationDateTime, expirationDateTimeCondition, status, skipRecords, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceNumber'>
            /// Identifies the Stocktake
            /// </param>
            public static StocktakeDto Get(this IStocktake operations, string referenceNumber)
            {
                return Task.Factory.StartNew(s => ((IStocktake)s).GetAsync(referenceNumber), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceNumber'>
            /// Identifies the Stocktake
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StocktakeDto> GetAsync( this IStocktake operations, string referenceNumber, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(referenceNumber, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific stocktake
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceNumber'>
            /// Identifies the stocktake to update
            /// </param>
            /// <param name='stocktake'>
            /// The data to update for stocktake
            /// </param>
            public static void Put(this IStocktake operations, string referenceNumber, StocktakeUpdateDto stocktake)
            {
                Task.Factory.StartNew(s => ((IStocktake)s).PutAsync(referenceNumber, stocktake), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific stocktake
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='referenceNumber'>
            /// Identifies the stocktake to update
            /// </param>
            /// <param name='stocktake'>
            /// The data to update for stocktake
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this IStocktake operations, string referenceNumber, StocktakeUpdateDto stocktake, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(referenceNumber, stocktake, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
