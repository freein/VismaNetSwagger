// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// </summary>
    public partial interface IVismanetAPI : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        IGeneralLedgerTransactions GeneralLedgerTransactions { get; }

        IPurchaseReceipt PurchaseReceipt { get; }

        IPurchaseReceiptBasic PurchaseReceiptBasic { get; }

        IAccount Account { get; }

        IAttachment Attachment { get; }

        IBranch Branch { get; }

        ICarrier Carrier { get; }

        ICashSale CashSale { get; }

        IContact Contact { get; }

        ICreditNote CreditNote { get; }

        ICurrency Currency { get; }

        ICustomer Customer { get; }

        ICustomerDocument CustomerDocument { get; }

        ICustomerInvoice CustomerInvoice { get; }

        IDimension Dimension { get; }

        IEmployee Employee { get; }

        IFinancialPeriod FinancialPeriod { get; }

        IGeneralLedgerBalance GeneralLedgerBalance { get; }

        IInventory Inventory { get; }

        IInventoryReceipt InventoryReceipt { get; }

        IInventoryTransfer InventoryTransfer { get; }

        IInventoryAdjustment InventoryAdjustment { get; }

        IInventoryIssue InventoryIssue { get; }

        IInventorySummary InventorySummary { get; }

        IJournalTransaction JournalTransaction { get; }

        ILedger Ledger { get; }

        IPackagingType PackagingType { get; }

        IPayment Payment { get; }

        IPaymentMethod PaymentMethod { get; }

        IPurchaseOrder PurchaseOrder { get; }

        IPurchaseOrderBasic PurchaseOrderBasic { get; }

        ISalesOrder SalesOrder { get; }

        ISalesOrderBasic SalesOrderBasic { get; }

        ISalesOrderType SalesOrderType { get; }

        IShipment Shipment { get; }

        IStocktake Stocktake { get; }

        ISubaccount Subaccount { get; }

        ISupplier Supplier { get; }

        ISupplierInvoice SupplierInvoice { get; }

        ISupplierDocument SupplierDocument { get; }

        IVat Vat { get; }

        IVatCategory VatCategory { get; }

            /// <summary>
        /// Test connection
        /// </summary>
        /// Returns "OK" as plain text if the test connection succeded.
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> TestConnectionWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get security token using credentials.
        /// </summary>
        /// Issue token for the client based on provided User Credentials
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetSecurityTokenWithHttpMessagesAsync(UserCredentials body = default(UserCredentials), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='authorization'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RevokeSecurityTokenWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the companies available for this token.
        /// </summary>
        /// <param name='authorization'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ContextInformation>>> GetAvailableUserContextsWithHttpMessagesAsync(string authorization = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Obtain access token
        /// </summary>
        /// <param name='grantType'>
        /// Grant type. Possible values for this parameter include: 'password'
        /// </param>
        /// <param name='username'>
        /// Visma.net user email
        /// </param>
        /// <param name='password'>
        /// Visma.net password
        /// </param>
        /// <param name='authorization'>
        /// HTTP Basic authentication, the preffered way to authenticate
        /// clients
        /// </param>
        /// <param name='clientId'>
        /// Client identifier. Mandatory to be set when no other HTTP
        /// authentication was used. For instance, a client can also use
        /// Authorization header to pass HTTP Basic authentication details
        /// </param>
        /// <param name='clientSecret'>
        /// Client secret. Mandatory to be set only when no other HTTP
        /// authentication was set.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> TokenWithHttpMessagesAsync(string grantType, string username, string password, string authorization = default(string), string clientId = default(string), string clientSecret = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
