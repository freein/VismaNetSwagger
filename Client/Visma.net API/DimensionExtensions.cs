// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class DimensionExtensions
    {
            /// <summary>
            /// Get a list of all Dimension names/IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetDimensionList(this IDimension operations)
            {
                return Task.Factory.StartNew(s => ((IDimension)s).GetDimensionListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of all Dimension names/IDs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetDimensionListAsync( this IDimension operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDimensionListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static DtoDimension GetDimension(this IDimension operations, string dimensionId, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((IDimension)s).GetDimensionAsync(dimensionId, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DtoDimension> GetDimensionAsync( this IDimension operations, string dimensionId, string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDimensionWithHttpMessagesAsync(dimensionId, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific Segment for a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            public static DtoSegment GetSegment(this IDimension operations, string dimensionId, int? segmentId)
            {
                return Task.Factory.StartNew(s => ((IDimension)s).GetSegmentAsync(dimensionId, segmentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific Segment for a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DtoSegment> GetSegmentAsync( this IDimension operations, string dimensionId, int? segmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSegmentWithHttpMessagesAsync(dimensionId, segmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Segment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension for which the Segment is defined
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            /// <param name='update'>
            /// Defines the data for the Segment to update
            /// </param>
            public static void UpdateSegment(this IDimension operations, string dimensionId, int? segmentId, DtoSegmentUpdate update)
            {
                Task.Factory.StartNew(s => ((IDimension)s).UpdateSegmentAsync(dimensionId, segmentId, update), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Segment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension for which the Segment is defined
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            /// <param name='update'>
            /// Defines the data for the Segment to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSegmentAsync( this IDimension operations, string dimensionId, int? segmentId, DtoSegmentUpdate update, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateSegmentWithHttpMessagesAsync(dimensionId, segmentId, update, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific SegmentValue for a specific Segment for a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            /// <param name='publicId'>
            /// Identifies the SegmentValue by its publicId
            /// </param>
            public static DtoSegmentValue GetSegmentValue(this IDimension operations, string dimensionId, int? segmentId, string publicId)
            {
                return Task.Factory.StartNew(s => ((IDimension)s).GetSegmentValueAsync(dimensionId, segmentId, publicId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific SegmentValue for a specific Segment for a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            /// <param name='publicId'>
            /// Identifies the SegmentValue by its publicId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DtoSegmentValue> GetSegmentValueAsync( this IDimension operations, string dimensionId, int? segmentId, string publicId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSegmentValueWithHttpMessagesAsync(dimensionId, segmentId, publicId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific SegmentValue for a specific Segment for a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            /// <param name='valueId'>
            /// Identifies the SegmentValue by Id. Must be Base64 encoded.
            /// </param>
            public static DtoSegmentValue GetSegmentValue1(this IDimension operations, string dimensionId, int? segmentId, string valueId)
            {
                return Task.Factory.StartNew(s => ((IDimension)s).GetSegmentValue1Async(dimensionId, segmentId, valueId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific SegmentValue for a specific Segment for a specific Dimension
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dimensionId'>
            /// Identifies the Dimension
            /// </param>
            /// <param name='segmentId'>
            /// Identifies the Segment
            /// </param>
            /// <param name='valueId'>
            /// Identifies the SegmentValue by Id. Must be Base64 encoded.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DtoSegmentValue> GetSegmentValue1Async( this IDimension operations, string dimensionId, int? segmentId, string valueId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSegmentValue1WithHttpMessagesAsync(dimensionId, segmentId, valueId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
