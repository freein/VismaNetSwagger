// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class SalesOrderExtensions
    {
            /// <summary>
            /// Get a range of SO Orders
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderType'>
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            public static IList<SalesOrderDto> GetAllOrders(this ISalesOrder operations, string orderType = default(string), string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string))
            {
                return Task.Factory.StartNew(s => ((ISalesOrder)s).GetAllOrdersAsync(orderType, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of SO Orders
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderType'>
            /// </param>
            /// <param name='greaterThanValue'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='orderBy'>
            /// </param>
            /// <param name='lastModifiedDateTime'>
            /// </param>
            /// <param name='lastModifiedDateTimeCondition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SalesOrderDto>> GetAllOrdersAsync( this ISalesOrder operations, string orderType = default(string), string greaterThanValue = default(string), int? numberToRead = default(int?), int? skipRecords = default(int?), string orderBy = default(string), string lastModifiedDateTime = default(string), string lastModifiedDateTimeCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllOrdersWithHttpMessagesAsync(orderType, greaterThanValue, numberToRead, skipRecords, orderBy, lastModifiedDateTime, lastModifiedDateTimeCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a Sale Order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='saleOrderUpdateDto'>
            /// Defines the data for the Sale Order to create
            /// </param>
            public static void Post(this ISalesOrder operations, SalesOrderUpdateDto saleOrderUpdateDto)
            {
                Task.Factory.StartNew(s => ((ISalesOrder)s).PostAsync(saleOrderUpdateDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a Sale Order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='saleOrderUpdateDto'>
            /// Defines the data for the Sale Order to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync( this ISalesOrder operations, SalesOrderUpdateDto saleOrderUpdateDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PostWithHttpMessagesAsync(saleOrderUpdateDto, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a specific SO Order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderNbr'>
            /// Identifies the So Order
            /// </param>
            public static SalesOrderDto Get(this ISalesOrder operations, string orderNbr)
            {
                return Task.Factory.StartNew(s => ((ISalesOrder)s).GetAsync(orderNbr), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific SO Order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderNbr'>
            /// Identifies the So Order
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SalesOrderDto> GetAsync( this ISalesOrder operations, string orderNbr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(orderNbr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Crete shipment operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='saleOrderNumber'>
            /// Reference number of the sale oreder from which the shipment will be created
            /// </param>
            /// <param name='createShipmentActionDto'>
            /// Defines the data for the action
            /// </param>
            public static CreateShipmentActionResultDto CreateShipmentAction(this ISalesOrder operations, string saleOrderNumber, CreateShipmentActionDto createShipmentActionDto)
            {
                return Task.Factory.StartNew(s => ((ISalesOrder)s).CreateShipmentActionAsync(saleOrderNumber, createShipmentActionDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Crete shipment operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='saleOrderNumber'>
            /// Reference number of the sale oreder from which the shipment will be created
            /// </param>
            /// <param name='createShipmentActionDto'>
            /// Defines the data for the action
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateShipmentActionResultDto> CreateShipmentActionAsync( this ISalesOrder operations, string saleOrderNumber, CreateShipmentActionDto createShipmentActionDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateShipmentActionWithHttpMessagesAsync(saleOrderNumber, createShipmentActionDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a specific Sale Order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='salesOrderNumber'>
            /// Identifies the Sale Order to update
            /// </param>
            /// <param name='saleOrderUpdateDto'>
            /// Defines the data for the Sale Order to update
            /// </param>
            public static void Put(this ISalesOrder operations, string salesOrderNumber, SalesOrderUpdateDto saleOrderUpdateDto)
            {
                Task.Factory.StartNew(s => ((ISalesOrder)s).PutAsync(salesOrderNumber, saleOrderUpdateDto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a specific Sale Order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='salesOrderNumber'>
            /// Identifies the Sale Order to update
            /// </param>
            /// <param name='saleOrderUpdateDto'>
            /// Defines the data for the Sale Order to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync( this ISalesOrder operations, string salesOrderNumber, SalesOrderUpdateDto saleOrderUpdateDto, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutWithHttpMessagesAsync(salesOrderNumber, saleOrderUpdateDto, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
