// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// </summary>
    public partial class VatInformationDto
    {
        /// <summary>
        /// Initializes a new instance of the VatInformationDto class.
        /// </summary>
        public VatInformationDto() { }

        /// <summary>
        /// Initializes a new instance of the VatInformationDto class.
        /// </summary>
        public VatInformationDto(string vatCategoryId = default(string), string vatId = default(string), string description = default(string), string type = default(string), bool? deductibleVat = default(bool?), bool? reverseVat = default(bool?), bool? statisticalVat = default(bool?), bool? pendingVat = default(bool?), bool? includeinVatExemptTotal = default(bool?), bool? includeinVatTotal = default(bool?), bool? enterFromVatInvoice = default(bool?), string calculateOn = default(string), string cashDiscount = default(string), SupplierNumberDto vatAgencyId = default(SupplierNumberDto), DateTime? notValidAfter = default(DateTime?), string euReportCode = default(string), string documentText = default(string), InventoryNumberDescriptionDto defaultNonStockItem = default(InventoryNumberDescriptionDto), string vismaXmlVatType = default(string), DateTime? lastModifiedDateTime = default(DateTime?), VatGlAccountsDto glAccounts = default(VatGlAccountsDto), IList<VatInformationScheduleDto> schedules = default(IList<VatInformationScheduleDto>), IList<VatCategoryDto> categories = default(IList<VatCategoryDto>), IList<VatZoneDto> zones = default(IList<VatZoneDto>))
        {
            VatCategoryId = vatCategoryId;
            VatId = vatId;
            Description = description;
            Type = type;
            DeductibleVat = deductibleVat;
            ReverseVat = reverseVat;
            StatisticalVat = statisticalVat;
            PendingVat = pendingVat;
            IncludeinVatExemptTotal = includeinVatExemptTotal;
            IncludeinVatTotal = includeinVatTotal;
            EnterFromVatInvoice = enterFromVatInvoice;
            CalculateOn = calculateOn;
            CashDiscount = cashDiscount;
            VatAgencyId = vatAgencyId;
            NotValidAfter = notValidAfter;
            EuReportCode = euReportCode;
            DocumentText = documentText;
            DefaultNonStockItem = defaultNonStockItem;
            VismaXmlVatType = vismaXmlVatType;
            LastModifiedDateTime = lastModifiedDateTime;
            GlAccounts = glAccounts;
            Schedules = schedules;
            Categories = categories;
            Zones = zones;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatCategoryId")]
        public string VatCategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatId")]
        public string VatId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Possible values for this property include: 'Sales', 'Use', 'Vat',
        /// 'Withholding', 'ExemptVat', 'StatisticalVat', 'DirectVat',
        /// 'PendingVat', 'ReverseVat'.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "deductibleVat")]
        public bool? DeductibleVat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reverseVat")]
        public bool? ReverseVat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "statisticalVat")]
        public bool? StatisticalVat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pendingVat")]
        public bool? PendingVat { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "includeinVatExemptTotal")]
        public bool? IncludeinVatExemptTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "includeinVatTotal")]
        public bool? IncludeinVatTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enterFromVatInvoice")]
        public bool? EnterFromVatInvoice { get; set; }

        /// <summary>
        /// Possible values for this property include:
        /// 'ExtractFromItemAmount', 'ItemAmount', 'ItemTaxAmount',
        /// 'DocumentAmount', 'DocumenTaxAmount'.
        /// </summary>
        [JsonProperty(PropertyName = "calculateOn")]
        public string CalculateOn { get; set; }

        /// <summary>
        /// Possible values for this property include: 'ToTaxableAmount',
        /// 'ToPromtPayment', 'ToTaxAmount', 'AdjustTax', 'NoAdjust'.
        /// </summary>
        [JsonProperty(PropertyName = "cashDiscount")]
        public string CashDiscount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatAgencyId")]
        public SupplierNumberDto VatAgencyId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "notValidAfter")]
        public DateTime? NotValidAfter { get; set; }

        /// <summary>
        /// Possible values for this property include: 'SalesOfGoods',
        /// 'Triangulation', 'SalesOfService'.
        /// </summary>
        [JsonProperty(PropertyName = "euReportCode")]
        public string EuReportCode { get; set; }

        /// <summary>
        /// Possible values for this property include: 'Construction',
        /// 'SupplyVat0', 'DenoteExportSales', 'EUSaleExemptFromTax',
        /// 'Triangulation', 'TransportOutsideEU', 'SpecialTaxFreeTransfer',
        /// 'MedicalServiceSales', 'BuyerHasVATLiability', 'SalesOfGold',
        /// 'GoodsServicesWithPartialDeduction', 'MargineScheme',
        /// 'TravelAgentsMargineScheme', 'PartiallyNonDeductibleInUse',
        /// 'Vat0SalesOutsideCommunity', 'SelfBilling',
        /// 'MargineSchemeUsedItems', 'MargineSchemeWorksOfArt',
        /// 'MargineSchemeCollectorsItems'.
        /// </summary>
        [JsonProperty(PropertyName = "documentText")]
        public string DocumentText { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultNonStockItem")]
        public InventoryNumberDescriptionDto DefaultNonStockItem { get; set; }

        /// <summary>
        /// Possible values for this property include: 'VatTypeHigh',
        /// 'VatTypeMedium', 'VatTypeLow', 'VatTypeZero'.
        /// </summary>
        [JsonProperty(PropertyName = "vismaXmlVatType")]
        public string VismaXmlVatType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public DateTime? LastModifiedDateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "glAccounts")]
        public VatGlAccountsDto GlAccounts { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "schedules")]
        public IList<VatInformationScheduleDto> Schedules { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<VatCategoryDto> Categories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zones")]
        public IList<VatZoneDto> Zones { get; set; }

    }
}
