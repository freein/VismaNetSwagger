// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// This class represents a SOOrder in SOOrderController. Used by getting
    /// data.
    /// </summary>
    public partial class SalesOrderBasicDto
    {
        /// <summary>
        /// Initializes a new instance of the SalesOrderBasicDto class.
        /// </summary>
        public SalesOrderBasicDto() { }

        /// <summary>
        /// Initializes a new instance of the SalesOrderBasicDto class.
        /// </summary>
        public SalesOrderBasicDto(IList<SalesOrderDocumentLineDto> lines = default(IList<SalesOrderDocumentLineDto>), string orderType = default(string), string orderNo = default(string), string status = default(string), bool? hold = default(bool?), DateTime? date = default(DateTime?), DateTime? requestOn = default(DateTime?), string customerOrder = default(string), string customerRefNo = default(string), CustomerDescriptionDto customer = default(CustomerDescriptionDto), LocationDto location = default(LocationDto), string currency = default(string), string description = default(string), double? orderTotal = default(double?), double? vatTaxableTotal = default(double?), double? vatExemptTotal = default(double?), double? taxTotal = default(double?), DateTime? lastModifiedDateTime = default(DateTime?))
        {
            Lines = lines;
            OrderType = orderType;
            OrderNo = orderNo;
            Status = status;
            Hold = hold;
            Date = date;
            RequestOn = requestOn;
            CustomerOrder = customerOrder;
            CustomerRefNo = customerRefNo;
            Customer = customer;
            Location = location;
            Currency = currency;
            Description = description;
            OrderTotal = orderTotal;
            VatTaxableTotal = vatTaxableTotal;
            VatExemptTotal = vatExemptTotal;
            TaxTotal = taxTotal;
            LastModifiedDateTime = lastModifiedDateTime;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lines")]
        public IList<SalesOrderDocumentLineDto> Lines { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderType")]
        public string OrderType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderNo")]
        public string OrderNo { get; set; }

        /// <summary>
        /// Possible values for this property include: 'Open', 'Hold',
        /// 'CreditHold', 'Completed', 'Cancelled', 'BackOrder', 'Shipping',
        /// 'Invoiced'.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hold")]
        public bool? Hold { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public DateTime? Date { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestOn")]
        public DateTime? RequestOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customerOrder")]
        public string CustomerOrder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customerRefNo")]
        public string CustomerRefNo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "customer")]
        public CustomerDescriptionDto Customer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public LocationDto Location { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "orderTotal")]
        public double? OrderTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatTaxableTotal")]
        public double? VatTaxableTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "vatExemptTotal")]
        public double? VatExemptTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taxTotal")]
        public double? TaxTotal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastModifiedDateTime")]
        public DateTime? LastModifiedDateTime { get; set; }

    }
}
