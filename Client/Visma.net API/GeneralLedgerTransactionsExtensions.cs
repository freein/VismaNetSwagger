// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace visma
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    public static partial class GeneralLedgerTransactionsExtensions
    {
            /// <summary>
            /// Get a range of General Ledger Transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// Mandatory
            /// </param>
            /// <param name='ledger'>
            /// Mandatory
            /// </param>
            /// <param name='fromPeriod'>
            /// Mandatory
            /// </param>
            /// <param name='toPeriod'>
            /// Mandatory
            /// </param>
            /// <param name='account'>
            /// Mandatory
            /// </param>
            /// <param name='subaccountId'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='includeUnposted'>
            /// </param>
            /// <param name='includeUnreleased'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            public static IList<GeneralLedgerTransactionDetailsDto> GetAll(this IGeneralLedgerTransactions operations, string branch = default(string), string ledger = default(string), string fromPeriod = default(string), string toPeriod = default(string), string account = default(string), string subaccountId = default(string), string fromDate = default(string), string toDate = default(string), bool? includeUnposted = default(bool?), bool? includeUnreleased = default(bool?), int? skipRecords = default(int?), int? numberToRead = default(int?))
            {
                return Task.Factory.StartNew(s => ((IGeneralLedgerTransactions)s).GetAllAsync(branch, ledger, fromPeriod, toPeriod, account, subaccountId, fromDate, toDate, includeUnposted, includeUnreleased, skipRecords, numberToRead), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a range of General Ledger Transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='branch'>
            /// Mandatory
            /// </param>
            /// <param name='ledger'>
            /// Mandatory
            /// </param>
            /// <param name='fromPeriod'>
            /// Mandatory
            /// </param>
            /// <param name='toPeriod'>
            /// Mandatory
            /// </param>
            /// <param name='account'>
            /// Mandatory
            /// </param>
            /// <param name='subaccountId'>
            /// </param>
            /// <param name='fromDate'>
            /// </param>
            /// <param name='toDate'>
            /// </param>
            /// <param name='includeUnposted'>
            /// </param>
            /// <param name='includeUnreleased'>
            /// </param>
            /// <param name='skipRecords'>
            /// </param>
            /// <param name='numberToRead'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GeneralLedgerTransactionDetailsDto>> GetAllAsync( this IGeneralLedgerTransactions operations, string branch = default(string), string ledger = default(string), string fromPeriod = default(string), string toPeriod = default(string), string account = default(string), string subaccountId = default(string), string fromDate = default(string), string toDate = default(string), bool? includeUnposted = default(bool?), bool? includeUnreleased = default(bool?), int? skipRecords = default(int?), int? numberToRead = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(branch, ledger, fromPeriod, toPeriod, account, subaccountId, fromDate, toDate, includeUnposted, includeUnreleased, skipRecords, numberToRead, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
